// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BehaviorPB.proto

#ifndef PROTOBUF_BehaviorPB_2eproto__INCLUDED
#define PROTOBUF_BehaviorPB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace BehaviorPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BehaviorPB_2eproto();
void protobuf_AssignDesc_BehaviorPB_2eproto();
void protobuf_ShutdownFile_BehaviorPB_2eproto();

class Composite;
class Composite_Parallel;
class Decorator;
class Decorator_Loop;
class Decorator_Counter;
class Condition;
class Action;
class Link;
class Node;
class Tree;

// ===================================================================

class Composite_Parallel : public ::google::protobuf::Message {
 public:
  Composite_Parallel();
  virtual ~Composite_Parallel();

  Composite_Parallel(const Composite_Parallel& from);

  inline Composite_Parallel& operator=(const Composite_Parallel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Composite_Parallel& default_instance();

  void Swap(Composite_Parallel* other);

  // implements Message ----------------------------------------------

  Composite_Parallel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Composite_Parallel& from);
  void MergeFrom(const Composite_Parallel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 policy = 1;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 1;
  inline ::google::protobuf::int32 policy() const;
  inline void set_policy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Composite.Parallel)
 private:
  inline void set_has_policy();
  inline void clear_has_policy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 policy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Composite_Parallel* default_instance_;
};
// -------------------------------------------------------------------

class Composite : public ::google::protobuf::Message {
 public:
  Composite();
  virtual ~Composite();

  Composite(const Composite& from);

  inline Composite& operator=(const Composite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Composite& default_instance();

  void Swap(Composite* other);

  // implements Message ----------------------------------------------

  Composite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Composite& from);
  void MergeFrom(const Composite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Composite_Parallel Parallel;

  // accessors -------------------------------------------------------

  // optional .BehaviorPB.Composite.Parallel parallel = 1;
  inline bool has_parallel() const;
  inline void clear_parallel();
  static const int kParallelFieldNumber = 1;
  inline const ::BehaviorPB::Composite_Parallel& parallel() const;
  inline ::BehaviorPB::Composite_Parallel* mutable_parallel();
  inline ::BehaviorPB::Composite_Parallel* release_parallel();
  inline void set_allocated_parallel(::BehaviorPB::Composite_Parallel* parallel);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Composite)
 private:
  inline void set_has_parallel();
  inline void clear_has_parallel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BehaviorPB::Composite_Parallel* parallel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Composite* default_instance_;
};
// -------------------------------------------------------------------

class Decorator_Loop : public ::google::protobuf::Message {
 public:
  Decorator_Loop();
  virtual ~Decorator_Loop();

  Decorator_Loop(const Decorator_Loop& from);

  inline Decorator_Loop& operator=(const Decorator_Loop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decorator_Loop& default_instance();

  void Swap(Decorator_Loop* other);

  // implements Message ----------------------------------------------

  Decorator_Loop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Decorator_Loop& from);
  void MergeFrom(const Decorator_Loop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 loop_cnt = 1;
  inline bool has_loop_cnt() const;
  inline void clear_loop_cnt();
  static const int kLoopCntFieldNumber = 1;
  inline ::google::protobuf::int32 loop_cnt() const;
  inline void set_loop_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Decorator.Loop)
 private:
  inline void set_has_loop_cnt();
  inline void clear_has_loop_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 loop_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Decorator_Loop* default_instance_;
};
// -------------------------------------------------------------------

class Decorator_Counter : public ::google::protobuf::Message {
 public:
  Decorator_Counter();
  virtual ~Decorator_Counter();

  Decorator_Counter(const Decorator_Counter& from);

  inline Decorator_Counter& operator=(const Decorator_Counter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decorator_Counter& default_instance();

  void Swap(Decorator_Counter* other);

  // implements Message ----------------------------------------------

  Decorator_Counter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Decorator_Counter& from);
  void MergeFrom(const Decorator_Counter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 limit_cnt = 1;
  inline bool has_limit_cnt() const;
  inline void clear_limit_cnt();
  static const int kLimitCntFieldNumber = 1;
  inline ::google::protobuf::int32 limit_cnt() const;
  inline void set_limit_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Decorator.Counter)
 private:
  inline void set_has_limit_cnt();
  inline void clear_has_limit_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 limit_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Decorator_Counter* default_instance_;
};
// -------------------------------------------------------------------

class Decorator : public ::google::protobuf::Message {
 public:
  Decorator();
  virtual ~Decorator();

  Decorator(const Decorator& from);

  inline Decorator& operator=(const Decorator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decorator& default_instance();

  void Swap(Decorator* other);

  // implements Message ----------------------------------------------

  Decorator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Decorator& from);
  void MergeFrom(const Decorator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Decorator_Loop Loop;
  typedef Decorator_Counter Counter;

  // accessors -------------------------------------------------------

  // optional .BehaviorPB.Decorator.Loop loop = 1;
  inline bool has_loop() const;
  inline void clear_loop();
  static const int kLoopFieldNumber = 1;
  inline const ::BehaviorPB::Decorator_Loop& loop() const;
  inline ::BehaviorPB::Decorator_Loop* mutable_loop();
  inline ::BehaviorPB::Decorator_Loop* release_loop();
  inline void set_allocated_loop(::BehaviorPB::Decorator_Loop* loop);

  // optional .BehaviorPB.Decorator.Counter counter = 2;
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 2;
  inline const ::BehaviorPB::Decorator_Counter& counter() const;
  inline ::BehaviorPB::Decorator_Counter* mutable_counter();
  inline ::BehaviorPB::Decorator_Counter* release_counter();
  inline void set_allocated_counter(::BehaviorPB::Decorator_Counter* counter);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Decorator)
 private:
  inline void set_has_loop();
  inline void clear_has_loop();
  inline void set_has_counter();
  inline void clear_has_counter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BehaviorPB::Decorator_Loop* loop_;
  ::BehaviorPB::Decorator_Counter* counter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Decorator* default_instance_;
};
// -------------------------------------------------------------------

class Condition : public ::google::protobuf::Message {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Condition& default_instance();

  void Swap(Condition* other);

  // implements Message ----------------------------------------------

  Condition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BehaviorPB.Condition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Condition* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BehaviorPB.Action)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sub_tree_name = 1;
  inline bool has_sub_tree_name() const;
  inline void clear_sub_tree_name();
  static const int kSubTreeNameFieldNumber = 1;
  inline const ::std::string& sub_tree_name() const;
  inline void set_sub_tree_name(const ::std::string& value);
  inline void set_sub_tree_name(const char* value);
  inline void set_sub_tree_name(const char* value, size_t size);
  inline ::std::string* mutable_sub_tree_name();
  inline ::std::string* release_sub_tree_name();
  inline void set_allocated_sub_tree_name(::std::string* sub_tree_name);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Link)
 private:
  inline void set_has_sub_tree_name();
  inline void clear_has_sub_tree_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sub_tree_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BehaviorPB.Node nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::BehaviorPB::Node& nodes(int index) const;
  inline ::BehaviorPB::Node* mutable_nodes(int index);
  inline ::BehaviorPB::Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::BehaviorPB::Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::BehaviorPB::Node >*
      mutable_nodes();

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .BehaviorPB.Composite composite = 3;
  inline bool has_composite() const;
  inline void clear_composite();
  static const int kCompositeFieldNumber = 3;
  inline const ::BehaviorPB::Composite& composite() const;
  inline ::BehaviorPB::Composite* mutable_composite();
  inline ::BehaviorPB::Composite* release_composite();
  inline void set_allocated_composite(::BehaviorPB::Composite* composite);

  // optional .BehaviorPB.Decorator decorator = 4;
  inline bool has_decorator() const;
  inline void clear_decorator();
  static const int kDecoratorFieldNumber = 4;
  inline const ::BehaviorPB::Decorator& decorator() const;
  inline ::BehaviorPB::Decorator* mutable_decorator();
  inline ::BehaviorPB::Decorator* release_decorator();
  inline void set_allocated_decorator(::BehaviorPB::Decorator* decorator);

  // optional .BehaviorPB.Condition condition = 5;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 5;
  inline const ::BehaviorPB::Condition& condition() const;
  inline ::BehaviorPB::Condition* mutable_condition();
  inline ::BehaviorPB::Condition* release_condition();
  inline void set_allocated_condition(::BehaviorPB::Condition* condition);

  // optional .BehaviorPB.Action action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline const ::BehaviorPB::Action& action() const;
  inline ::BehaviorPB::Action* mutable_action();
  inline ::BehaviorPB::Action* release_action();
  inline void set_allocated_action(::BehaviorPB::Action* action);

  // optional .BehaviorPB.Link link = 7;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 7;
  inline const ::BehaviorPB::Link& link() const;
  inline ::BehaviorPB::Link* mutable_link();
  inline ::BehaviorPB::Link* release_link();
  inline void set_allocated_link(::BehaviorPB::Link* link);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Node)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_composite();
  inline void clear_has_composite();
  inline void set_has_decorator();
  inline void clear_has_decorator();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_link();
  inline void clear_has_link();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BehaviorPB::Node > nodes_;
  ::BehaviorPB::Composite* composite_;
  ::BehaviorPB::Decorator* decorator_;
  ::BehaviorPB::Condition* condition_;
  ::BehaviorPB::Action* action_;
  ::BehaviorPB::Link* link_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  void Swap(Tree* other);

  // implements Message ----------------------------------------------

  Tree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .BehaviorPB.Node root = 2;
  inline bool has_root() const;
  inline void clear_root();
  static const int kRootFieldNumber = 2;
  inline const ::BehaviorPB::Node& root() const;
  inline ::BehaviorPB::Node* mutable_root();
  inline ::BehaviorPB::Node* release_root();
  inline void set_allocated_root(::BehaviorPB::Node* root);

  // @@protoc_insertion_point(class_scope:BehaviorPB.Tree)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_root();
  inline void clear_has_root();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::BehaviorPB::Node* root_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BehaviorPB_2eproto();
  friend void protobuf_AssignDesc_BehaviorPB_2eproto();
  friend void protobuf_ShutdownFile_BehaviorPB_2eproto();

  void InitAsDefaultInstance();
  static Tree* default_instance_;
};
// ===================================================================


// ===================================================================

// Composite_Parallel

// required int32 policy = 1;
inline bool Composite_Parallel::has_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Composite_Parallel::set_has_policy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Composite_Parallel::clear_has_policy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Composite_Parallel::clear_policy() {
  policy_ = 0;
  clear_has_policy();
}
inline ::google::protobuf::int32 Composite_Parallel::policy() const {
  return policy_;
}
inline void Composite_Parallel::set_policy(::google::protobuf::int32 value) {
  set_has_policy();
  policy_ = value;
}

// -------------------------------------------------------------------

// Composite

// optional .BehaviorPB.Composite.Parallel parallel = 1;
inline bool Composite::has_parallel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Composite::set_has_parallel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Composite::clear_has_parallel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Composite::clear_parallel() {
  if (parallel_ != NULL) parallel_->::BehaviorPB::Composite_Parallel::Clear();
  clear_has_parallel();
}
inline const ::BehaviorPB::Composite_Parallel& Composite::parallel() const {
  return parallel_ != NULL ? *parallel_ : *default_instance_->parallel_;
}
inline ::BehaviorPB::Composite_Parallel* Composite::mutable_parallel() {
  set_has_parallel();
  if (parallel_ == NULL) parallel_ = new ::BehaviorPB::Composite_Parallel;
  return parallel_;
}
inline ::BehaviorPB::Composite_Parallel* Composite::release_parallel() {
  clear_has_parallel();
  ::BehaviorPB::Composite_Parallel* temp = parallel_;
  parallel_ = NULL;
  return temp;
}
inline void Composite::set_allocated_parallel(::BehaviorPB::Composite_Parallel* parallel) {
  delete parallel_;
  parallel_ = parallel;
  if (parallel) {
    set_has_parallel();
  } else {
    clear_has_parallel();
  }
}

// -------------------------------------------------------------------

// Decorator_Loop

// required int32 loop_cnt = 1;
inline bool Decorator_Loop::has_loop_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decorator_Loop::set_has_loop_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decorator_Loop::clear_has_loop_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decorator_Loop::clear_loop_cnt() {
  loop_cnt_ = 0;
  clear_has_loop_cnt();
}
inline ::google::protobuf::int32 Decorator_Loop::loop_cnt() const {
  return loop_cnt_;
}
inline void Decorator_Loop::set_loop_cnt(::google::protobuf::int32 value) {
  set_has_loop_cnt();
  loop_cnt_ = value;
}

// -------------------------------------------------------------------

// Decorator_Counter

// required int32 limit_cnt = 1;
inline bool Decorator_Counter::has_limit_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decorator_Counter::set_has_limit_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decorator_Counter::clear_has_limit_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decorator_Counter::clear_limit_cnt() {
  limit_cnt_ = 0;
  clear_has_limit_cnt();
}
inline ::google::protobuf::int32 Decorator_Counter::limit_cnt() const {
  return limit_cnt_;
}
inline void Decorator_Counter::set_limit_cnt(::google::protobuf::int32 value) {
  set_has_limit_cnt();
  limit_cnt_ = value;
}

// -------------------------------------------------------------------

// Decorator

// optional .BehaviorPB.Decorator.Loop loop = 1;
inline bool Decorator::has_loop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decorator::set_has_loop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decorator::clear_has_loop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decorator::clear_loop() {
  if (loop_ != NULL) loop_->::BehaviorPB::Decorator_Loop::Clear();
  clear_has_loop();
}
inline const ::BehaviorPB::Decorator_Loop& Decorator::loop() const {
  return loop_ != NULL ? *loop_ : *default_instance_->loop_;
}
inline ::BehaviorPB::Decorator_Loop* Decorator::mutable_loop() {
  set_has_loop();
  if (loop_ == NULL) loop_ = new ::BehaviorPB::Decorator_Loop;
  return loop_;
}
inline ::BehaviorPB::Decorator_Loop* Decorator::release_loop() {
  clear_has_loop();
  ::BehaviorPB::Decorator_Loop* temp = loop_;
  loop_ = NULL;
  return temp;
}
inline void Decorator::set_allocated_loop(::BehaviorPB::Decorator_Loop* loop) {
  delete loop_;
  loop_ = loop;
  if (loop) {
    set_has_loop();
  } else {
    clear_has_loop();
  }
}

// optional .BehaviorPB.Decorator.Counter counter = 2;
inline bool Decorator::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Decorator::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Decorator::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Decorator::clear_counter() {
  if (counter_ != NULL) counter_->::BehaviorPB::Decorator_Counter::Clear();
  clear_has_counter();
}
inline const ::BehaviorPB::Decorator_Counter& Decorator::counter() const {
  return counter_ != NULL ? *counter_ : *default_instance_->counter_;
}
inline ::BehaviorPB::Decorator_Counter* Decorator::mutable_counter() {
  set_has_counter();
  if (counter_ == NULL) counter_ = new ::BehaviorPB::Decorator_Counter;
  return counter_;
}
inline ::BehaviorPB::Decorator_Counter* Decorator::release_counter() {
  clear_has_counter();
  ::BehaviorPB::Decorator_Counter* temp = counter_;
  counter_ = NULL;
  return temp;
}
inline void Decorator::set_allocated_counter(::BehaviorPB::Decorator_Counter* counter) {
  delete counter_;
  counter_ = counter;
  if (counter) {
    set_has_counter();
  } else {
    clear_has_counter();
  }
}

// -------------------------------------------------------------------

// Condition

// -------------------------------------------------------------------

// Action

// -------------------------------------------------------------------

// Link

// required string sub_tree_name = 1;
inline bool Link::has_sub_tree_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_sub_tree_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_sub_tree_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_sub_tree_name() {
  if (sub_tree_name_ != &::google::protobuf::internal::kEmptyString) {
    sub_tree_name_->clear();
  }
  clear_has_sub_tree_name();
}
inline const ::std::string& Link::sub_tree_name() const {
  return *sub_tree_name_;
}
inline void Link::set_sub_tree_name(const ::std::string& value) {
  set_has_sub_tree_name();
  if (sub_tree_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_tree_name_ = new ::std::string;
  }
  sub_tree_name_->assign(value);
}
inline void Link::set_sub_tree_name(const char* value) {
  set_has_sub_tree_name();
  if (sub_tree_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_tree_name_ = new ::std::string;
  }
  sub_tree_name_->assign(value);
}
inline void Link::set_sub_tree_name(const char* value, size_t size) {
  set_has_sub_tree_name();
  if (sub_tree_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_tree_name_ = new ::std::string;
  }
  sub_tree_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Link::mutable_sub_tree_name() {
  set_has_sub_tree_name();
  if (sub_tree_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_tree_name_ = new ::std::string;
  }
  return sub_tree_name_;
}
inline ::std::string* Link::release_sub_tree_name() {
  clear_has_sub_tree_name();
  if (sub_tree_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sub_tree_name_;
    sub_tree_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Link::set_allocated_sub_tree_name(::std::string* sub_tree_name) {
  if (sub_tree_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_tree_name_;
  }
  if (sub_tree_name) {
    set_has_sub_tree_name();
    sub_tree_name_ = sub_tree_name;
  } else {
    clear_has_sub_tree_name();
    sub_tree_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Node

// repeated .BehaviorPB.Node nodes = 1;
inline int Node::nodes_size() const {
  return nodes_.size();
}
inline void Node::clear_nodes() {
  nodes_.Clear();
}
inline const ::BehaviorPB::Node& Node::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::BehaviorPB::Node* Node::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::BehaviorPB::Node* Node::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BehaviorPB::Node >&
Node::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::BehaviorPB::Node >*
Node::mutable_nodes() {
  return &nodes_;
}

// required int32 type = 2;
inline bool Node::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Node::type() const {
  return type_;
}
inline void Node::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .BehaviorPB.Composite composite = 3;
inline bool Node::has_composite() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_composite() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_composite() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_composite() {
  if (composite_ != NULL) composite_->::BehaviorPB::Composite::Clear();
  clear_has_composite();
}
inline const ::BehaviorPB::Composite& Node::composite() const {
  return composite_ != NULL ? *composite_ : *default_instance_->composite_;
}
inline ::BehaviorPB::Composite* Node::mutable_composite() {
  set_has_composite();
  if (composite_ == NULL) composite_ = new ::BehaviorPB::Composite;
  return composite_;
}
inline ::BehaviorPB::Composite* Node::release_composite() {
  clear_has_composite();
  ::BehaviorPB::Composite* temp = composite_;
  composite_ = NULL;
  return temp;
}
inline void Node::set_allocated_composite(::BehaviorPB::Composite* composite) {
  delete composite_;
  composite_ = composite;
  if (composite) {
    set_has_composite();
  } else {
    clear_has_composite();
  }
}

// optional .BehaviorPB.Decorator decorator = 4;
inline bool Node::has_decorator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_decorator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_decorator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_decorator() {
  if (decorator_ != NULL) decorator_->::BehaviorPB::Decorator::Clear();
  clear_has_decorator();
}
inline const ::BehaviorPB::Decorator& Node::decorator() const {
  return decorator_ != NULL ? *decorator_ : *default_instance_->decorator_;
}
inline ::BehaviorPB::Decorator* Node::mutable_decorator() {
  set_has_decorator();
  if (decorator_ == NULL) decorator_ = new ::BehaviorPB::Decorator;
  return decorator_;
}
inline ::BehaviorPB::Decorator* Node::release_decorator() {
  clear_has_decorator();
  ::BehaviorPB::Decorator* temp = decorator_;
  decorator_ = NULL;
  return temp;
}
inline void Node::set_allocated_decorator(::BehaviorPB::Decorator* decorator) {
  delete decorator_;
  decorator_ = decorator;
  if (decorator) {
    set_has_decorator();
  } else {
    clear_has_decorator();
  }
}

// optional .BehaviorPB.Condition condition = 5;
inline bool Node::has_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_condition() {
  if (condition_ != NULL) condition_->::BehaviorPB::Condition::Clear();
  clear_has_condition();
}
inline const ::BehaviorPB::Condition& Node::condition() const {
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::BehaviorPB::Condition* Node::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::BehaviorPB::Condition;
  return condition_;
}
inline ::BehaviorPB::Condition* Node::release_condition() {
  clear_has_condition();
  ::BehaviorPB::Condition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void Node::set_allocated_condition(::BehaviorPB::Condition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
}

// optional .BehaviorPB.Action action = 6;
inline bool Node::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_action() {
  if (action_ != NULL) action_->::BehaviorPB::Action::Clear();
  clear_has_action();
}
inline const ::BehaviorPB::Action& Node::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::BehaviorPB::Action* Node::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::BehaviorPB::Action;
  return action_;
}
inline ::BehaviorPB::Action* Node::release_action() {
  clear_has_action();
  ::BehaviorPB::Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void Node::set_allocated_action(::BehaviorPB::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// optional .BehaviorPB.Link link = 7;
inline bool Node::has_link() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_link() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_link() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_link() {
  if (link_ != NULL) link_->::BehaviorPB::Link::Clear();
  clear_has_link();
}
inline const ::BehaviorPB::Link& Node::link() const {
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
inline ::BehaviorPB::Link* Node::mutable_link() {
  set_has_link();
  if (link_ == NULL) link_ = new ::BehaviorPB::Link;
  return link_;
}
inline ::BehaviorPB::Link* Node::release_link() {
  clear_has_link();
  ::BehaviorPB::Link* temp = link_;
  link_ = NULL;
  return temp;
}
inline void Node::set_allocated_link(::BehaviorPB::Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
}

// -------------------------------------------------------------------

// Tree

// required string name = 1;
inline bool Tree::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tree::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tree::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tree::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Tree::name() const {
  return *name_;
}
inline void Tree::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tree::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tree::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tree::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Tree::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tree::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .BehaviorPB.Node root = 2;
inline bool Tree::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tree::set_has_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tree::clear_has_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tree::clear_root() {
  if (root_ != NULL) root_->::BehaviorPB::Node::Clear();
  clear_has_root();
}
inline const ::BehaviorPB::Node& Tree::root() const {
  return root_ != NULL ? *root_ : *default_instance_->root_;
}
inline ::BehaviorPB::Node* Tree::mutable_root() {
  set_has_root();
  if (root_ == NULL) root_ = new ::BehaviorPB::Node;
  return root_;
}
inline ::BehaviorPB::Node* Tree::release_root() {
  clear_has_root();
  ::BehaviorPB::Node* temp = root_;
  root_ = NULL;
  return temp;
}
inline void Tree::set_allocated_root(::BehaviorPB::Node* root) {
  delete root_;
  root_ = root;
  if (root) {
    set_has_root();
  } else {
    clear_has_root();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BehaviorPB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BehaviorPB_2eproto__INCLUDED
